Wrapper classes in Java:

Datatype:
primitive and non primitive

Primitive / Predefined / Built-in / Fundamental / Value type / Simple type / Atomic type :
byte, short, int, long, float, double, char, boolean

Non primitive / User defined / Derived / Reference type / Complex type / Composite type :
String, Array, Class, Interface

Wrapper class:
Definition: A wrapper class is a class whose object wraps or contains primitive data types.
Autoboxing: Automatic conversion of primitive data type to its corresponding wrapper class object is called autoboxing.
Unboxing: Automatic conversion of wrapper class object to its corresponding primitive data type is called unboxing.

Why we need wrapper classes?
1. To convert primitive data type to object and object to primitive data type.
2. To convert string to primitive data type and primitive data type to string.
3. To convert string to object and object to string.

Uses of wrapper classes:
1. Change the value in the method. (Pass by reference)
    - In java, we can't change the value of primitive data type in the method.
    - But we can change the value of wrapper class object in the method.
2. Serialization and deserialization.
3. Synchoronization in multithreading. 
4. Java.util package provides utility classes for wrapper classes.
5. Collection framework works only with objects. So we need wrapper classes to store primitive data types in collection objects.
    - ArrayList, LinkedList, HashSet, TreeSet, HashMap, TreeMap, etc.


boolean -> Boolean
byte    -> Byte
short   -> Short
int     -> Integer
long    -> Long
float   -> Float
double  -> Double
char    -> Character


