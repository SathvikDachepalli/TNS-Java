a.	Simple / Single –
Simple Inheritance is nothing but a single child class have a single parent 
class. This is a basic type of inheritance.
Syntax:
	class child extends parent {
		//code here.
}
Program:
	
	class Employee{
		int salary = 100000;
		Employee(){
	            this.salary=100000;
        }
	    Employee(salary) {
	    	this.salary=salary;
        }
	    int bonus () {
	    	return salary*(20/100)
        }
    }
    class Programmer extends Employee{
    	Programmer(){
        	super();
        }
        Programmer(salary){
        	super(salary);
        }
        void type(){
        	sout(“Im a programmer”);
        }
        int bonus(){
        	return super.salary*(30/100)
        }
        }
        public class Demo{
        	pvsm(){
        		Programmer p = Programmer(400000);
        		p.type();
        		p.bonus();
            }
        }



b.	Multilevel Inheritance –
Multilevel Inheritance is nothing but a child class have a parent class and
that parent class have another parent class. 

Syntax:
    class child1 extends parent {
        //code here.
    }
    class child2 extends child1 {
            //code here.
    }

Program:
    class Pet {
        void eat() {
            System.out.println("eating...");
        }
    }

    class Cat extends Pet {
        void sound() {
            System.out.println("Meow! ");
        }
    }

    class ScottishEarFold extends Cat {
        void describe() {
            System.out.println("Scottish Ear Fold have a round and cute face");
        }
    }

    class TestInheritance2 {
        public static void main(String args[]) {
            ScottishEarFold s = new ScottishEarFold();
            s.sound();
            s.eat();
            s.describe();
        }
    }

c.	Hierarchical Inheritance –
Hierarchical Inheritance is nothing but a parent class is inherited by multiple
child classes.
Syntax:
    class child1 extends parent {
        //code here.
    }
    class child2 extends parent {
            //code here.
    }

Program:

    class College{
        College(){
            System.out.println("Sreyas");
        }
    }
    class CSE extends College{
        CSE(){
            System.out.println("CSE");
        }
    }
    class ECE extends College{
        ECE(){
            System.out.println("ECE");
        }
    }
    class IT extends College{
        IT(){
            System.out.println("IT");
        }
    }
    class TestInheritance3{
        public static void main(String args[]){
            CSE c = new CSE();
            ECE e = new ECE();
            IT i = new IT();
        }
    }

Super keyword:
Super keyword is used to access the data members and methods of parent class when both
parent and child class have same data members and methods.

Syntax:
    super.data_member_name;
    super.method_name();

Program:

    class Resturant {
        String name = "Heavens";
        void display() {
            System.out.println("Welcome to " + name);
        }
    }
    class ResturantBranch extends Resturant {
        String name = "Heavens NYC";
        void display() {
            super.display();
            System.out.println("Welcome to " + super.name);
        }
    }
    class TestSuper1 {
        public static void main(String args[]) {
            ResturantBranch r = new ResturantBranch();
            r.display();
        }
    }

Method Overloading:

Method Overloading is nothing but a method have same name but different parameters.

Syntax:
    void method1(){}
    void method1(args..){}
    int method1(args..){}
    float method1(args){}

Example:

    class Addition{
        int a,b;
        a=10;
        b=10;
        int add(){
            return a+b;
        }
        int add(int x){
            return x+a+b;
        }
        float add(float x, float y){
            return x+y;
        }
    }
    public class TestAdd{
        public static void main(String[] args){
            Addition a= new Addition();
            System.out.println(a.add())
            System.out.println(a.add(10))
            System.out.println(a.add(10.4,11.9))
        }
    }

Method Overridding:

Method Overridding is also known as Runtime polymorphism.
Method Overridding is nothing but a method have same name with same parameters is
overriden at the time of execution. 

Syntax:
    class A{
        void method1{}
    }
    class B extends A{
        @override;
        void method1{}
    }

Example:

    class Employee{
        void work(){
            System.out.println(" This is a default job. ")
        }
    }
    class Programmer extends Employee{
        void work(){
            System.out.println(" Im a programmer ")
        }
    }
    public class TestOverRide{
        public staitc void main(String[] args){
            Programmer p = new Programmer();
            p.work();
        }
    }

Abstraction:

Abstraction is nothing but a process of hiding the implementation details and showing
only functionality to the user.

Example:

    abstract class Resturant{
        abstract void display();
    }
    class ResturantBranch extends Resturant{
        public void display(){
            System.out.println("Welcome to Heavens");
        }
    }
    class TestAbstraction{
        public static void main(String args[]){
            ResturantBranch r = new ResturantBranch();
            r.display();
        }
    }

