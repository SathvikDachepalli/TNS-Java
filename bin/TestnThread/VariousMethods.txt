1. Current Thread
2. join()
3. Thread Priority
4. Daemon Thread
5. Thread Group





1. Current Thread:
    Gets the name of the current thread which is active and running.

2. join():
    The join() method waits for the thread to terminate.
    Suppose there are threads like a, b, c.
    Suppose, if i want to execute b thread completely after a thread execution, then i want to put a,c in waiting state.
    Then, we can use join() method.

    Let us assume that Time slice is 5 secs.

    Thread A = new Thread(); // 10 secs
    Thread B = new Thread(); // 15 secs
    Thread C = new Thread(); // 20 secs

    and I need to perform join method on B thread, then
    B.join();
    Then, B thread will be executed completely and then A and C threads will be executed.

3. Thread Priority
    - Thread priority is a number between 1 to 10.
    - 1 is the least priority and 10 is the highest priority.
    - By default, the priority of the thread is 5.
    - JVM will decide which thread to execute first based on the priority.
    - If two threads have same priority, then JVM will decide which thread to execute first.
    - If we want to change the priority of the thread, then we can use setPriority() method.
    - setPriority() method takes an integer value as an argument.

    - Thread.MIN_PRIORITY = 1
    - Thread.MAX_PRIORITY = 10
    - Thread.NORM_PRIORITY = 5

    2 Methods to set the priority of the thread:
    1. setPriority()
    2. setPriority(Thread.MIN_PRIORITY)

    2 Methods to get the priority of the thread:
    1. getPriority()
    2. Thread.currentThread().getPriority()

    Structure of Thread class:

    public final int getPriority(){}
    public final void setPriority(int newPriority){}

4. Daemon Thread
    - Low priority thread.
    - It provides services to the user thread.
    - It is a service provider for the user thread.
    - Life is dependent on the user thread.
    - If all the user threads are dead, then JVM will terminate the daemon thread automatically.
    - It is a background thread.

    - Example: Garbage Collector, Finalizer, Signal Dispatcher

    - To create a daemon thread, we need to use setDaemon() method.
    - setDaemon() method takes a boolean value as an argument.

    Methods:
    1. public void setDaemon(boolean b){}
    2. public boolean isDaemon(){}

5. Thread Group:
    - A thread group contains a collection of threads.
    - Thread groups can have sub thread groups.
    - The thread group creates a tree in which every thread group except the initial thread group has a parent.
    - A thread is allowed to access information about its own thread group, but not to access information about its thread group's parent thread group or any other thread groups.

    Methods:
    1. ThreadGroup(String name)  // Creates a new thread group. ThreadGroup("Parent")
    2. ThreadGroup(ThreadGroup parent, String name) // Creates a new thread group. ThreadGroup("Child", Parent)
    3. ThreadGroup(ThreadGroup parent, String name, int Priority) // Creates a new thread group. ThreadGroup("Child", Parent, 10)

    Example:
    ThreadGroup g1 = new ThreadGroup("Parent");
    ThreadGroup g2 = new ThreadGroup(g1, "Child");
    ThreadGroup g3 = new ThreadGroup(g2, "Sub Child", 9);
    
    Thread t1g1 = new Thread(g1, "Thread 1", new MyRunnable());
    Thread t2g1 = new Thread(g1, "Thread 2", new MyRunnable());
    Thread t1g2 = new Thread(g2, "Thread 3", new MyRunnable());
    Thread t2g2 = new Thread(g2, "Thread 4", new MyRunnable());
    Thread t1g3 = new Thread(g3, "Thread 5", new MyRunnable());

    

    